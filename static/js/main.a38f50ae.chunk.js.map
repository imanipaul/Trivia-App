{"version":3,"sources":["components/Intro.js","components/Answer.js","components/Question.js","components/Result.js","components/ProgressTracker.js","components/Quiz.js","App.js","index.js"],"names":["Intro","className","Answer","props","answerRef","useRef","useEffect","current","classList","remove","answer","clickable","add","correctAnswer","ref","style","cursor","onClick","selectedAnswer","setSelectedAnswers","selectedAnswers","value","correct","setClickable","setScore","score","undefined","Question","allAnswers","data","incorrect","useState","shuffledAnswers","setShuffledAnswers","shuffled","setShuffled","resetAnswers","shuffleAnswers","currentQuestion","answersArray","i","length","val","Math","floor","random","hold","question","map","index","Result","ProgressTracker","trackerRef","clientWidth","totalWidth","setTotalWidth","completedWidth","setCompletedWidth","window","addEventListener","removeEventListener","calculateInnerWidth","totalQuestions","width","Quiz","setCurrentQuestion","buttonRef","jsonData","status","setButtonState","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a38f50ae.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/Intro.scss\";\n\nexport default function Intro() {\n  return (\n    <section className=\"intro-container\">\n      <h1>Tandem Trivia</h1>\n      <h2>Ready to test your knowledge? Click the button to begin!</h2>\n    </section>\n  );\n}\n","import React, { useEffect, useRef } from \"react\";\nimport \"../styles/Answer.scss\";\n\nexport default function Answer(props) {\n  const answerRef = useRef(null);\n\n  useEffect(() => {\n    answerRef.current.classList.remove(\"selected\", \"correct\", \"incorrect\");\n  }, [props.answer]);\n\n  useEffect(() => {\n    if (props.clickable) {\n      answerRef.current.classList.add(\"clickable\");\n    } else {\n      answerRef.current.classList.remove(\"clickable\");\n      //if answer is not clickable and it is correct, update class\n      if (props.answer === props.correctAnswer) {\n        answerRef.current.classList.add(\"correct\");\n      }\n    }\n  }, [props.clickable, props.answer, props.correctAnswer]);\n\n  const matchAnswers = (selectedAnswer, correctAnswer) => {\n    if (selectedAnswer === correctAnswer) {\n      props.setScore(props.score + 1);\n    }\n  };\n\n  return (\n    <div\n      ref={answerRef}\n      className={\"answer\"}\n      style={{ cursor: props.clickable ? \"default\" : \"not-allowed\" }}\n      onClick={\n        //if answers are clickable...\n        props.clickable\n          ? () => {\n              //...add value to select answers array\n              props.setSelectedAnswers([\n                ...props.selectedAnswers,\n                {\n                  value: props.answer,\n                  correct: props.answer === props.correctAnswer,\n                },\n                // props.answer,\n              ]);\n\n              //make all other buttons unclickable\n              props.setClickable(false);\n\n              //update classes for styling\n              answerRef.current.classList.add(\n                \"selected\",\n                props.answer === props.correctAnswer ? \"correct\" : \"incorrect\"\n              );\n              matchAnswers(props.answer, props.correctAnswer);\n            }\n          : undefined\n      }\n    >\n      {props.answer}\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Answer from \"./Answer\";\nimport \"../styles/Question.scss\";\n\nexport default function Question(props) {\n  let allAnswers = [props.data.correct, ...props.data.incorrect];\n  const [shuffledAnswers, setShuffledAnswers] = useState([]);\n  const [shuffled, setShuffled] = useState(false);\n\n  useEffect(() => {\n    resetAnswers();\n    shuffleAnswers(allAnswers);\n  }, [props.currentQuestion]);\n\n  const resetAnswers = () => {\n    setShuffled(false);\n    setShuffledAnswers([]);\n  };\n\n  const shuffleAnswers = (answersArray) => {\n    for (let i = answersArray.length - 1; i > 0; i--) {\n      const val = Math.floor(Math.random() * i);\n      const hold = answersArray[i];\n      answersArray[i] = answersArray[val];\n      answersArray[val] = hold;\n    }\n    setShuffledAnswers(answersArray);\n    setShuffled(true);\n  };\n\n  return (\n    <section className=\"question\">\n      <h1>Question # {props.currentQuestion + 1}</h1>\n      <h2>{props.data.question}</h2>\n      <div className=\"answers\">\n        {shuffled &&\n          shuffledAnswers.map((answer, index) => (\n            <Answer\n              key={index}\n              answer={answer}\n              setSelectedAnswers={props.setSelectedAnswers}\n              selectedAnswers={props.selectedAnswers}\n              clickable={props.clickable}\n              setClickable={props.setClickable}\n              score={props.score}\n              setScore={props.setScore}\n              correctAnswer={props.data.correct}\n            />\n          ))}\n      </div>\n    </section>\n  );\n}\n","import React from \"react\";\nimport \"../styles/Result.scss\";\n\nexport default function Result(props) {\n  return (\n    <section className=\"result\">\n      <h1>Results</h1>\n      <h2>\n        You scored <span className=\"score\">{props.score}</span>\n      </h2>\n      <div className=\"result-answer-container\">\n        {props.selectedAnswers.map((answer, index) => (\n          <p\n            key={index}\n            className=\"result-answer\"\n            className={\n              answer.correct\n                ? \"result-answer correct\"\n                : \"result-answer incorrect\"\n            }\n          >\n            {index + 1} : {answer.value}\n          </p>\n        ))}\n      </div>\n    </section>\n  );\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport \"../styles/ProgressTracker.scss\";\n\nexport default function ProgressTracker(props) {\n  let trackerRef = useRef(null);\n  const [totalWidth, setTotalWidth] = useState(\n    trackerRef.current && trackerRef.current.clientWidth\n  );\n  const [completedWidth, setCompletedWidth] = useState(0);\n\n  useEffect(() => {\n    setTotalWidth(trackerRef.current.clientWidth);\n\n    window.addEventListener(\"resize\", () =>\n      setTotalWidth(trackerRef.current.clientWidth)\n    );\n\n    return () =>\n      window.removeEventListener(\"resize\", () =>\n        setTotalWidth(trackerRef.current.clientWidth)\n      );\n  }, []);\n\n  useEffect(() => {\n    calculateInnerWidth(\n      props.currentQuestion,\n      props.totalQuestions,\n      totalWidth\n    );\n  }, [props.currentQuestion, props.totalQuestions, totalWidth, completedWidth]);\n\n  const calculateInnerWidth = (currentQuestion, totalQuestions, width) => {\n    if (currentQuestion < 0) {\n      return \"Game has not started\";\n    } else if (currentQuestion === \"result\") {\n      setCompletedWidth(totalWidth);\n    } else {\n      // divide current question by total questions to get percent of game completed\n      let percentCompleted = currentQuestion / totalQuestions;\n\n      //multiply percent completed by total width to get fractional width of progress bar\n      setCompletedWidth(percentCompleted * width);\n    }\n  };\n\n  return (\n    <section ref={trackerRef} className=\"progress-tracker\">\n      <div className=\"progress\" style={{ width: completedWidth }}></div>\n    </section>\n  );\n}\n","import React, { useState, useRef, useEffect } from \"react\";\nimport Intro from \"./Intro\";\nimport jsonData from \"../data/quizData.json\";\nimport Question from \"./Question\";\nimport Result from \"./Result\";\nimport ProgressTracker from \"./ProgressTracker\";\nimport \"../styles/Quiz.scss\";\n\nexport default function Quiz() {\n  const [currentQuestion, setCurrentQuestion] = useState(-1);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [clickable, setClickable] = useState(true);\n  const [score, setScore] = useState(0);\n  const buttonRef = useRef(null);\n\n  const setButtonState = (status) => {\n    switch (status) {\n      case -1:\n        return \"Let's Start!\";\n      case \"result\":\n        return \"Play Again?\";\n      case jsonData.length - 1:\n        return \"See Your Results!\";\n      default:\n        return \"Next\";\n    }\n  };\n\n  const resetGame = () => {\n    setSelectedAnswers([]);\n    setCurrentQuestion(-1);\n    setClickable(true);\n    setScore(0);\n  };\n\n  return (\n    <section className={currentQuestion === -1 ? \"quiz intro\" : \"quiz\"}>\n      {currentQuestion !== -1 && (\n        <ProgressTracker\n          currentQuestion={currentQuestion}\n          totalQuestions={jsonData.length}\n        />\n      )}\n      {currentQuestion === -1 ? (\n        <Intro\n          setCurrentQuestion={setCurrentQuestion}\n          currentQuestion={currentQuestion}\n        />\n      ) : currentQuestion === \"result\" ? (\n        <Result selectedAnswers={selectedAnswers} score={score} />\n      ) : (\n        <Question\n          currentQuestion={currentQuestion}\n          setCurrentQuestion={setCurrentQuestion}\n          data={jsonData[currentQuestion]}\n          selectedAnswers={selectedAnswers}\n          setSelectedAnswers={setSelectedAnswers}\n          clickable={clickable}\n          setClickable={setClickable}\n          score={score}\n          setScore={setScore}\n        />\n      )}\n      <button\n        ref={buttonRef}\n        className={\n          currentQuestion === selectedAnswers.length\n            ? \"unavailable\"\n            : \"available\"\n        }\n        onClick={() => {\n          if (currentQuestion === jsonData.length - 1) {\n            setCurrentQuestion(\"result\");\n          } else if (currentQuestion === \"result\") {\n            resetGame();\n          } else {\n            if (currentQuestion === selectedAnswers.length) {\n              return;\n            } else {\n              setCurrentQuestion(currentQuestion + 1);\n            }\n          }\n          setClickable(true);\n        }}\n      >\n        {setButtonState(currentQuestion)}\n      </button>\n    </section>\n  );\n}\n","import React from \"react\";\nimport Quiz from \"./components/Quiz\";\nimport \"./App.css\";\nimport ProgressTracker from \"./components/ProgressTracker\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <ProgressTracker /> */}\n      <Quiz />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}